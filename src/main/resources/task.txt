// TODO: цена д.б. связана с ProductDetails, поскольку зависит от размера и т.п. И, кстати, картинок м.б. несколько для
// одного и того же товара, это НАДО ОТРАЗИТЬ В ТАБЛИЦЕ у админа.
//  Наконец, в таблице д.б. отражены также название и описание товара, так что в вышенаписанном (или новом) методе
//  контроллера нужно возвращать не ProductImage, а какой-нибудь ProductImageDTO с соответстующими деталями, и, наверное,
//  URL строить не через @PathVariable /{resourceId}, а через @RequestParam /image?id=...&details=true. И потом нужно
//  будет еще искать продукт по названию, если его нет - создавать новый, если есть - отображать табличку, и в качестве
//  details отображать все картинки, связанные с этим продуктом.

тест для популяции ProductDetail
контроллер для ProductDetail

добавить в ProductDetailRepository и сервис метод findAllByProduct, может быть, как хранимую функцию, или как @Query


т.е., чтобы удалить Product (тем более вместе со всеми ProductDetail) и не напороться на constraint violation,
я должен сделать следующее (видимо, через метод в самом классе, как при MTM? но скорее всего, через сервисы и Query):
удаление самого Product:
- найти все ProductDetail, с которыми связан данный Product OTM, и установить им product = null;
- что касается Producer, то ему пофиг: хотя Product связан с ним MTO, у самого Producer нет колонки с id Product.
Теперь Producer можно удалить.
Удаление связанных с ним ProductDetail:
- вначале пользуемся методом removeProductImages самого класса ProductDetail, стираем связи с картинками;
- потом удаляем.