server.port=8081
server.servlet.context-path=/store

#DB properties:
spring.datasource.driver-class-name=org.postgresql.Driver
# https://jdbc.postgresql.org/documentation/head/connect.html
spring.datasource.url=jdbc:postgresql://localhost:5432/store
spring.datasource.username=postgres
spring.datasource.password=root
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQL9Dialect

spring.jpa.show-sql=true

# https://docs.spring.io/spring-boot/docs/current/reference/html/howto-database-initialization.html#howto-initialize-a-database-using-spring-jdbc
# datasource.initialization-mode: Initialize the datasource with available DDL and DML scripts (i.e. Spring Boot
# to create the schema of embedded DataSource automatically). In Spring Boot 2 this parameter is "embedded" by default,
# so I need to replace it with "always" to initialize "real" db, or "never" to not use the DataSource (data.sql operators).
# See also https://walkingtechie.blogspot.com/2018/12/execute-schema-and-data-sql-on-startup-spring-boot.html

spring.datasource.initialization-mode=never

# in a JPA-based app, you can choose to LET HIBERNATE CREATE THE SCHEMA or USE schema.sql, BUT YOU CANNOT DO BOTH.
# So if I use spring.jpa.hibernate.ddl-auto (disabled with "none", standard hibernate properties values are:
# none,validate, update, create, create-drop), I need to set spring.datasource.initialization-mode=never
# Make sure to disable spring.jpa.hibernate.ddl-auto if you use schema.sql (*what about data.sql?).

spring.jpa.hibernate.ddl-auto=update

# The query to use for selecting the username, password, and if the user is enabled by username or deactivated.
spring.queries.customer-query=select c.login, c.password, c.enabled from customers c where c.login=?
spring.queries.roles-query=select c.login, r.role from customers c inner join customer_role cr on c.id = cr.customer_id inner join roles r on r.id = cr.role_id where c.login = ?

## MULTIPART (MultipartProperties)
# Enable multipart uploads
spring.servlet.multipart.enabled=true
# Threshold after which files are written to disk.
spring.servlet.multipart.file-size-threshold=2KB
# Max file size.
spring.servlet.multipart.max-file-size=200MB
# Max Request Size
spring.servlet.multipart.max-request-size=215MB

## File Storage Properties
# All files uploaded through the REST API will be stored in this directory
file.upload-dir=./uploads


#debug=true